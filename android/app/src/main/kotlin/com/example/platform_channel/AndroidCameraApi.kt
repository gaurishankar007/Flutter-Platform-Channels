// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private fun deepEqualsAndroidCameraApi(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
      return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
      return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
      return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
      return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsAndroidCameraApi(a[it], b[it]) }
  }
  if (a is List<*> && b is List<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsAndroidCameraApi(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size && a.all {
        (b as Map<Any?, Any?>).containsKey(it.key) &&
        deepEqualsAndroidCameraApi(it.value, b[it.key])
    }
  }
  return a == b
}
    

/**
 * Specifies the parameters for opening the camera
 * - [cameraIndex]: Camera selection index (e.g., 0 for back, 1 for front)
 * - [cameraFrameRate]: Frame rate at which the camera session captures the images (e.g., 30, 60)
 * - [previewSize]: Camera preview resolution (e.g., "1920x1080")
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidCameraRequest (
  val cameraIndex: Long,
  val cameraFrameRate: Long,
  val previewSize: AndroidSize
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidCameraRequest {
      val cameraIndex = pigeonVar_list[0] as Long
      val cameraFrameRate = pigeonVar_list[1] as Long
      val previewSize = pigeonVar_list[2] as AndroidSize
      return AndroidCameraRequest(cameraIndex, cameraFrameRate, previewSize)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cameraIndex,
      cameraFrameRate,
      previewSize,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidCameraRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * - [frameSkipInterval]: The interval between sending image frames while streaming image.
 * Camera frame rate = 30fps, [frameSkipInterval] = 2, Image stream rate = 15fps (30 / 2).
 * - [imageSize]: Image size
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidImageStreamRequest (
  val frameSkipInterval: Long,
  val imageSize: AndroidSize
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidImageStreamRequest {
      val frameSkipInterval = pigeonVar_list[0] as Long
      val imageSize = pigeonVar_list[1] as AndroidSize
      return AndroidImageStreamRequest(frameSkipInterval, imageSize)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frameSkipInterval,
      imageSize,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidImageStreamRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * - [bufferSizeKB]: The size of the audio bytes in KB which will be steamed. e.g. 8KB = 8x1024 bytes.
 * - [sampleRate]: Audio samples are taken per second. 44100 (44.1KHz) or 48000 (48KHz).
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidAudioStreamRequest (
  val bufferSizeKB: Long,
  val sampleRate: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidAudioStreamRequest {
      val bufferSizeKB = pigeonVar_list[0] as Long
      val sampleRate = pigeonVar_list[1] as Long
      return AndroidAudioStreamRequest(bufferSizeKB, sampleRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      bufferSizeKB,
      sampleRate,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidAudioStreamRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * - [filePath]: Path of the video file where it will be saved. e.g. /storage/emulated/0/Download/video.mp4.
 * - [resolution]: Video resolution like 720p, 1080p.
 * - [encodingBitRate]: Data (bits) used to represent the video per second. For 720p = 2-5 Mbps, 1080p = 5-10 Mbps, 2160p = 15-30 Mbps. 1MB = 1000000 Bit
 * - [audioChannels]: Number of audio channels. 1 for mono and 2 for stereo if supported.
 * - [audioSampleRate]: Audio samples are taken per second. 44100 (44.1KHz) or 48000 (48KHz).
 * - [audioEncodingBitRate]: Data (bits) is used to represent the audio per second. Higher is better better audio quality. Common values for good quality AAC audio are 96 kbps, 128 kbps, or even 192 kbps.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidVideoRecordRequest (
  val filePath: String,
  val resolution: AndroidSize,
  val encodingBitRate: Long,
  val audioChannels: Long,
  val audioSampleRate: Long,
  val audioEncodingBitRate: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidVideoRecordRequest {
      val filePath = pigeonVar_list[0] as String
      val resolution = pigeonVar_list[1] as AndroidSize
      val encodingBitRate = pigeonVar_list[2] as Long
      val audioChannels = pigeonVar_list[3] as Long
      val audioSampleRate = pigeonVar_list[4] as Long
      val audioEncodingBitRate = pigeonVar_list[5] as Long
      return AndroidVideoRecordRequest(filePath, resolution, encodingBitRate, audioChannels, audioSampleRate, audioEncodingBitRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      filePath,
      resolution,
      encodingBitRate,
      audioChannels,
      audioSampleRate,
      audioEncodingBitRate,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidVideoRecordRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Stores the camera data while opening the camera
 * - [frameRate]: Frame rate at which the camera session captures the images.
 * - [textureId]: Surface texture id.
 * - [previewSize]: Camera preview size.
 * - [supportedSizes]: Supported sizes by the camera device.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidCameraData (
  val frameRate: Long,
  val textureId: Long,
  val previewSize: AndroidSize,
  val supportedSizes: List<AndroidSize>,
  val supportedFps: List<Long>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidCameraData {
      val frameRate = pigeonVar_list[0] as Long
      val textureId = pigeonVar_list[1] as Long
      val previewSize = pigeonVar_list[2] as AndroidSize
      val supportedSizes = pigeonVar_list[3] as List<AndroidSize>
      val supportedFps = pigeonVar_list[4] as List<Long>
      return AndroidCameraData(frameRate, textureId, previewSize, supportedSizes, supportedFps)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frameRate,
      textureId,
      previewSize,
      supportedSizes,
      supportedFps,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidCameraData) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidOrientationData (
  val isFrontCamera: Boolean,
  val sensorOrientationDegrees: Long,
  val deviceOrientationDegrees: Long,
  val displayOrientationDegrees: Long,
  val rotationDegrees: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidOrientationData {
      val isFrontCamera = pigeonVar_list[0] as Boolean
      val sensorOrientationDegrees = pigeonVar_list[1] as Long
      val deviceOrientationDegrees = pigeonVar_list[2] as Long
      val displayOrientationDegrees = pigeonVar_list[3] as Long
      val rotationDegrees = pigeonVar_list[4] as Long
      return AndroidOrientationData(isFrontCamera, sensorOrientationDegrees, deviceOrientationDegrees, displayOrientationDegrees, rotationDegrees)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isFrontCamera,
      sensorOrientationDegrees,
      deviceOrientationDegrees,
      displayOrientationDegrees,
      rotationDegrees,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidOrientationData) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidImagePlaneData (
  val bytes: ByteArray,
  val rowStride: Long,
  val pixelStride: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidImagePlaneData {
      val bytes = pigeonVar_list[0] as ByteArray
      val rowStride = pigeonVar_list[1] as Long
      val pixelStride = pigeonVar_list[2] as Long
      return AndroidImagePlaneData(bytes, rowStride, pixelStride)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      bytes,
      rowStride,
      pixelStride,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidImagePlaneData) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidCameraImageData (
  val width: Long,
  val height: Long,
  val format: Long,
  val planes: List<AndroidImagePlaneData?>,
  val rotationDegrees: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidCameraImageData {
      val width = pigeonVar_list[0] as Long
      val height = pigeonVar_list[1] as Long
      val format = pigeonVar_list[2] as Long
      val planes = pigeonVar_list[3] as List<AndroidImagePlaneData?>
      val rotationDegrees = pigeonVar_list[4] as Long
      return AndroidCameraImageData(width, height, format, planes, rotationDegrees)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      width,
      height,
      format,
      planes,
      rotationDegrees,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidCameraImageData) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidSize (
  val width: Double,
  val height: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidSize {
      val width = pigeonVar_list[0] as Double
      val height = pigeonVar_list[1] as Double
      return AndroidSize(width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      width,
      height,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidSize) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AndroidRangeInt (
  val lower: Long,
  val upper: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidRangeInt {
      val lower = pigeonVar_list[0] as Long
      val upper = pigeonVar_list[1] as Long
      return AndroidRangeInt(lower, upper)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      lower,
      upper,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidRangeInt) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsAndroidCameraApi(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class AndroidCameraApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidCameraRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidImageStreamRequest.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidAudioStreamRequest.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidVideoRecordRequest.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidCameraData.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidOrientationData.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidImagePlaneData.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidCameraImageData.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidSize.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidRangeInt.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AndroidCameraRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is AndroidImageStreamRequest -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AndroidAudioStreamRequest -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is AndroidVideoRecordRequest -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is AndroidCameraData -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is AndroidOrientationData -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is AndroidImagePlaneData -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is AndroidCameraImageData -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is AndroidSize -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is AndroidRangeInt -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidCameraHostApi {
  fun openCamera(request: AndroidCameraRequest, callback: (Result<AndroidCameraData>) -> Unit)
  fun getOrientationData(callback: (Result<AndroidOrientationData>) -> Unit)
  fun startImageStream(request: AndroidImageStreamRequest, callback: (Result<Unit>) -> Unit)
  fun stopImageStream(callback: (Result<Unit>) -> Unit)
  fun startAudioStream(request: AndroidAudioStreamRequest, callback: (Result<Unit>) -> Unit)
  fun stopAudioStream(callback: (Result<Unit>) -> Unit)
  fun startVideoRecording(request: AndroidVideoRecordRequest, callback: (Result<Unit>) -> Unit)
  fun stopVideoRecording(callback: (Result<Unit>) -> Unit)
  fun closeCamera(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by AndroidCameraHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      AndroidCameraApiPigeonCodec()
    }
    /** Sets up an instance of `AndroidCameraHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidCameraHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.openCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as AndroidCameraRequest
            api.openCamera(requestArg) { result: Result<AndroidCameraData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.getOrientationData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getOrientationData{ result: Result<AndroidOrientationData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startImageStream$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as AndroidImageStreamRequest
            api.startImageStream(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopImageStream$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopImageStream{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startAudioStream$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as AndroidAudioStreamRequest
            api.startAudioStream(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopAudioStream$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopAudioStream{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as AndroidVideoRecordRequest
            api.startVideoRecording(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopVideoRecording{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.closeCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.closeCamera{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class AndroidCameraFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by AndroidCameraFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      AndroidCameraApiPigeonCodec()
    }
  }
  /** Receives image data from the camera while streaming images. */
  fun onImageReceived(cameraImageArg: AndroidCameraImageData, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onImageReceived$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cameraImageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Receives audio bytes from the microphone while streaming audio. */
  fun onAudioReceived(audioBytesArg: ByteArray, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onAudioReceived$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(audioBytesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
