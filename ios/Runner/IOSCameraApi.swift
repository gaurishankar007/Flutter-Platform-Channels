// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsIOSCameraApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsIOSCameraApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsIOSCameraApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashIOSCameraApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashIOSCameraApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashIOSCameraApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Specifies the parameters for opening the camera
/// - [cameraIndex]: Camera selection index (e.g., 0 for back, 1 for front)
/// - [videoInputSize]: Camera capture resolution
/// - [videoInputFrameRate]: Camera capture frame rate
/// - [imageStreamFrameSkipInterval]: The interval between sending image frames while streaming image.
/// Camera frame rate = 30fps, [imageStreamFrameSkipInterval] = 2, Image stream rate = 15fps, (30 / 2).
///
/// Generated class from Pigeon that represents data sent in messages.
struct IOSCameraRequest: Hashable {
  var cameraIndex: Int64
  var videoInputSize: IOSSize
  var videoInputFrameRate: Int64
  var imageStreamFrameSkipInterval: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSCameraRequest? {
    let cameraIndex = pigeonVar_list[0] as! Int64
    let videoInputSize = pigeonVar_list[1] as! IOSSize
    let videoInputFrameRate = pigeonVar_list[2] as! Int64
    let imageStreamFrameSkipInterval = pigeonVar_list[3] as! Int64

    return IOSCameraRequest(
      cameraIndex: cameraIndex,
      videoInputSize: videoInputSize,
      videoInputFrameRate: videoInputFrameRate,
      imageStreamFrameSkipInterval: imageStreamFrameSkipInterval
    )
  }
  func toList() -> [Any?] {
    return [
      cameraIndex,
      videoInputSize,
      videoInputFrameRate,
      imageStreamFrameSkipInterval,
    ]
  }
  static func == (lhs: IOSCameraRequest, rhs: IOSCameraRequest) -> Bool {
    return deepEqualsIOSCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashIOSCameraApi(value: toList(), hasher: &hasher)
  }
}

/// Stores the camera data while opening the camera
/// - [textureId]: Surface texture id.
/// - [videoInputSize]: Camera capture resolution
/// - [videoInputFrameRate]: Camera capture frame rate
/// - [supportedSizes]: Supported sizes along with it's frame rates by the camera device.
///
/// Generated class from Pigeon that represents data sent in messages.
struct IOSCameraData: Hashable {
  var textureId: Int64
  var videoInputSize: IOSSize
  var videoInputFrameRate: Int64
  var supportedSizes: [IOSCameraSize]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSCameraData? {
    let textureId = pigeonVar_list[0] as! Int64
    let videoInputSize = pigeonVar_list[1] as! IOSSize
    let videoInputFrameRate = pigeonVar_list[2] as! Int64
    let supportedSizes = pigeonVar_list[3] as! [IOSCameraSize]

    return IOSCameraData(
      textureId: textureId,
      videoInputSize: videoInputSize,
      videoInputFrameRate: videoInputFrameRate,
      supportedSizes: supportedSizes
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      videoInputSize,
      videoInputFrameRate,
      supportedSizes,
    ]
  }
  static func == (lhs: IOSCameraData, rhs: IOSCameraData) -> Bool {
    return deepEqualsIOSCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashIOSCameraApi(value: toList(), hasher: &hasher)
  }
}

/// - [width]: Width of the size.
/// - [height]: Height of the size.
/// - [frameRates]: Supported frame rates.
///
/// Generated class from Pigeon that represents data sent in messages.
struct IOSCameraSize: Hashable {
  var width: Double
  var height: Double
  var frameRates: [Int64]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSCameraSize? {
    let width = pigeonVar_list[0] as! Double
    let height = pigeonVar_list[1] as! Double
    let frameRates = pigeonVar_list[2] as! [Int64]

    return IOSCameraSize(
      width: width,
      height: height,
      frameRates: frameRates
    )
  }
  func toList() -> [Any?] {
    return [
      width,
      height,
      frameRates,
    ]
  }
  static func == (lhs: IOSCameraSize, rhs: IOSCameraSize) -> Bool {
    return deepEqualsIOSCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashIOSCameraApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IOSSize: Hashable {
  var width: Double
  var height: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSSize? {
    let width = pigeonVar_list[0] as! Double
    let height = pigeonVar_list[1] as! Double

    return IOSSize(
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      width,
      height,
    ]
  }
  static func == (lhs: IOSSize, rhs: IOSSize) -> Bool {
    return deepEqualsIOSCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashIOSCameraApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IOSRangeInt: Hashable {
  var lower: Int64
  var upper: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSRangeInt? {
    let lower = pigeonVar_list[0] as! Int64
    let upper = pigeonVar_list[1] as! Int64

    return IOSRangeInt(
      lower: lower,
      upper: upper
    )
  }
  func toList() -> [Any?] {
    return [
      lower,
      upper,
    ]
  }
  static func == (lhs: IOSRangeInt, rhs: IOSRangeInt) -> Bool {
    return deepEqualsIOSCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashIOSCameraApi(value: toList(), hasher: &hasher)
  }
}

private class IOSCameraApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return IOSCameraRequest.fromList(self.readValue() as! [Any?])
    case 130:
      return IOSCameraData.fromList(self.readValue() as! [Any?])
    case 131:
      return IOSCameraSize.fromList(self.readValue() as! [Any?])
    case 132:
      return IOSSize.fromList(self.readValue() as! [Any?])
    case 133:
      return IOSRangeInt.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class IOSCameraApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? IOSCameraRequest {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? IOSCameraData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? IOSCameraSize {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? IOSSize {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? IOSRangeInt {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class IOSCameraApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return IOSCameraApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return IOSCameraApiPigeonCodecWriter(data: data)
  }
}

class IOSCameraApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = IOSCameraApiPigeonCodec(readerWriter: IOSCameraApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IOSCameraHostApi {
  func requestCameraAccess(completion: @escaping (Result<Bool, Error>) -> Void)
  func requestMicrophoneAccess(completion: @escaping (Result<Bool, Error>) -> Void)
  func openCamera(request: IOSCameraRequest, completion: @escaping (Result<IOSCameraData, Error>) -> Void)
  func updateCameraVideoOutputOrientation(completion: @escaping (Result<Bool, Error>) -> Void)
  func startVideoRecording(completion: @escaping (Result<Bool, Error>) -> Void)
  func stopVideoRecording(completion: @escaping (Result<Bool, Error>) -> Void)
  func closeCamera(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IOSCameraHostApiSetup {
  static var codec: FlutterStandardMessageCodec { IOSCameraApiPigeonCodec.shared }
  /// Sets up an instance of `IOSCameraHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IOSCameraHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let requestCameraAccessChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.requestCameraAccess\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestCameraAccessChannel.setMessageHandler { _, reply in
        api.requestCameraAccess { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestCameraAccessChannel.setMessageHandler(nil)
    }
    let requestMicrophoneAccessChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.requestMicrophoneAccess\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestMicrophoneAccessChannel.setMessageHandler { _, reply in
        api.requestMicrophoneAccess { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestMicrophoneAccessChannel.setMessageHandler(nil)
    }
    let openCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.openCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! IOSCameraRequest
        api.openCamera(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      openCameraChannel.setMessageHandler(nil)
    }
    let updateCameraVideoOutputOrientationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.updateCameraVideoOutputOrientation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateCameraVideoOutputOrientationChannel.setMessageHandler { _, reply in
        api.updateCameraVideoOutputOrientation { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateCameraVideoOutputOrientationChannel.setMessageHandler(nil)
    }
    let startVideoRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.startVideoRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startVideoRecordingChannel.setMessageHandler { _, reply in
        api.startVideoRecording { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startVideoRecordingChannel.setMessageHandler(nil)
    }
    let stopVideoRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.stopVideoRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopVideoRecordingChannel.setMessageHandler { _, reply in
        api.stopVideoRecording { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopVideoRecordingChannel.setMessageHandler(nil)
    }
    let closeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.closeCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeCameraChannel.setMessageHandler { _, reply in
        api.closeCamera { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      closeCameraChannel.setMessageHandler(nil)
    }
  }
}
