// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

/// Specifies the parameters for opening the camera
/// - [cameraIndex]: Camera selection index (e.g., 0 for back, 1 for front)
/// - [videoInputSize]: Camera capture resolution
/// - [videoInputFrameRate]: Camera capture frame rate
/// - [imageStreamFrameSkipInterval]: The interval between sending image frames while streaming image.
/// Camera frame rate = 30fps, [imageStreamFrameSkipInterval] = 2, Image stream rate = 15fps, (30 / 2).
class IOSCameraRequest {
  IOSCameraRequest({
    required this.cameraIndex,
    required this.videoInputSize,
    required this.videoInputFrameRate,
    required this.imageStreamFrameSkipInterval,
  });

  int cameraIndex;

  IOSSize videoInputSize;

  int videoInputFrameRate;

  int imageStreamFrameSkipInterval;

  List<Object?> _toList() {
    return <Object?>[
      cameraIndex,
      videoInputSize,
      videoInputFrameRate,
      imageStreamFrameSkipInterval,
    ];
  }

  Object encode() {
    return _toList();
  }

  static IOSCameraRequest decode(Object result) {
    result as List<Object?>;
    return IOSCameraRequest(
      cameraIndex: result[0]! as int,
      videoInputSize: result[1]! as IOSSize,
      videoInputFrameRate: result[2]! as int,
      imageStreamFrameSkipInterval: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IOSCameraRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Stores the camera data while opening the camera
/// - [textureId]: Surface texture id.
/// - [videoInputSize]: Camera capture resolution
/// - [videoInputFrameRate]: Camera capture frame rate
/// - [supportedSizes]: Supported sizes along with it's frame rates by the camera device.
class IOSCameraData {
  IOSCameraData({
    required this.textureId,
    required this.videoInputSize,
    required this.videoInputFrameRate,
    required this.supportedSizes,
  });

  int textureId;

  IOSSize videoInputSize;

  int videoInputFrameRate;

  List<IOSCameraSize> supportedSizes;

  List<Object?> _toList() {
    return <Object?>[
      textureId,
      videoInputSize,
      videoInputFrameRate,
      supportedSizes,
    ];
  }

  Object encode() {
    return _toList();
  }

  static IOSCameraData decode(Object result) {
    result as List<Object?>;
    return IOSCameraData(
      textureId: result[0]! as int,
      videoInputSize: result[1]! as IOSSize,
      videoInputFrameRate: result[2]! as int,
      supportedSizes: (result[3] as List<Object?>?)!.cast<IOSCameraSize>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IOSCameraData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// - [width]: Width of the size.
/// - [height]: Height of the size.
/// - [frameRates]: Supported frame rates.
class IOSCameraSize {
  IOSCameraSize({
    required this.width,
    required this.height,
    required this.frameRates,
  });

  double width;

  double height;

  List<int> frameRates;

  List<Object?> _toList() {
    return <Object?>[width, height, frameRates];
  }

  Object encode() {
    return _toList();
  }

  static IOSCameraSize decode(Object result) {
    result as List<Object?>;
    return IOSCameraSize(
      width: result[0]! as double,
      height: result[1]! as double,
      frameRates: (result[2] as List<Object?>?)!.cast<int>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IOSCameraSize || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class IOSSize {
  IOSSize({required this.width, required this.height});

  double width;

  double height;

  List<Object?> _toList() {
    return <Object?>[width, height];
  }

  Object encode() {
    return _toList();
  }

  static IOSSize decode(Object result) {
    result as List<Object?>;
    return IOSSize(width: result[0]! as double, height: result[1]! as double);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IOSSize || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class IOSRangeInt {
  IOSRangeInt({required this.lower, required this.upper});

  int lower;

  int upper;

  List<Object?> _toList() {
    return <Object?>[lower, upper];
  }

  Object encode() {
    return _toList();
  }

  static IOSRangeInt decode(Object result) {
    result as List<Object?>;
    return IOSRangeInt(lower: result[0]! as int, upper: result[1]! as int);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IOSRangeInt || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is IOSCameraRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is IOSCameraData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is IOSCameraSize) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is IOSSize) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is IOSRangeInt) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return IOSCameraRequest.decode(readValue(buffer)!);
      case 130:
        return IOSCameraData.decode(readValue(buffer)!);
      case 131:
        return IOSCameraSize.decode(readValue(buffer)!);
      case 132:
        return IOSSize.decode(readValue(buffer)!);
      case 133:
        return IOSRangeInt.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class IOSCameraHostApi {
  /// Constructor for [IOSCameraHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  IOSCameraHostApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> requestCameraAccess() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.requestCameraAccess$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> requestMicrophoneAccess() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.requestMicrophoneAccess$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<IOSCameraData> openCamera(IOSCameraRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.openCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[request],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as IOSCameraData?)!;
    }
  }

  Future<bool> updateCameraVideoOutputOrientation() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.updateCameraVideoOutputOrientation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> startVideoRecording() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.startVideoRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> stopVideoRecording() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.stopVideoRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> closeCamera() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.IOSCameraHostApi.closeCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}
