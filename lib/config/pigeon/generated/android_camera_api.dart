// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

/// Specifies the parameters for opening the camera
/// - [cameraIndex]: Camera selection index (e.g., 0 for back, 1 for front)
/// - [cameraFrameRate]: Frame rate at which the camera session captures the images (e.g., 30, 60)
/// - [previewSize]: Camera preview resolution (e.g., "1920x1080")
class AndroidCameraRequest {
  AndroidCameraRequest({
    required this.cameraIndex,
    required this.cameraFrameRate,
    required this.previewSize,
  });

  int cameraIndex;

  int cameraFrameRate;

  AndroidSize previewSize;

  List<Object?> _toList() {
    return <Object?>[cameraIndex, cameraFrameRate, previewSize];
  }

  Object encode() {
    return _toList();
  }

  static AndroidCameraRequest decode(Object result) {
    result as List<Object?>;
    return AndroidCameraRequest(
      cameraIndex: result[0]! as int,
      cameraFrameRate: result[1]! as int,
      previewSize: result[2]! as AndroidSize,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidCameraRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// - [frameSkipInterval]: The interval between sending image frames while streaming image.
/// Camera frame rate = 30fps, [frameSkipInterval] = 2, Image stream rate = 15fps (30 / 2).
/// - [imageSize]: Image size
class AndroidImageStreamRequest {
  AndroidImageStreamRequest({
    required this.frameSkipInterval,
    required this.imageSize,
  });

  int frameSkipInterval;

  AndroidSize imageSize;

  List<Object?> _toList() {
    return <Object?>[frameSkipInterval, imageSize];
  }

  Object encode() {
    return _toList();
  }

  static AndroidImageStreamRequest decode(Object result) {
    result as List<Object?>;
    return AndroidImageStreamRequest(
      frameSkipInterval: result[0]! as int,
      imageSize: result[1]! as AndroidSize,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidImageStreamRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// - [bufferSizeKB]: The size of the audio bytes in KB which will be steamed. e.g. 8KB = 8x1024 bytes.
/// - [sampleRate]: Audio samples are taken per second. 44100 (44.1KHz) or 48000 (48KHz).
class AndroidAudioStreamRequest {
  AndroidAudioStreamRequest({
    required this.bufferSizeKB,
    required this.sampleRate,
  });

  int bufferSizeKB;

  int sampleRate;

  List<Object?> _toList() {
    return <Object?>[bufferSizeKB, sampleRate];
  }

  Object encode() {
    return _toList();
  }

  static AndroidAudioStreamRequest decode(Object result) {
    result as List<Object?>;
    return AndroidAudioStreamRequest(
      bufferSizeKB: result[0]! as int,
      sampleRate: result[1]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidAudioStreamRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// - [filePath]: Path of the video file where it will be saved. e.g. /storage/emulated/0/Download/video.mp4.
/// - [resolution]: Video resolution like 720p, 1080p.
/// - [encodingBitRate]: Data (bits) used to represent the video per second. For 720p = 2-5 Mbps, 1080p = 5-10 Mbps, 2160p = 15-30 Mbps. 1MB = 1000000 Bit
/// - [audioChannels]: Number of audio channels. 1 for mono and 2 for stereo if supported.
/// - [audioSampleRate]: Audio samples are taken per second. 44100 (44.1KHz) or 48000 (48KHz).
/// - [audioEncodingBitRate]: Data (bits) is used to represent the audio per second. Higher is better better audio quality. Common values for good quality AAC audio are 96 kbps, 128 kbps, or even 192 kbps.
class AndroidVideoRecordRequest {
  AndroidVideoRecordRequest({
    required this.filePath,
    required this.resolution,
    required this.encodingBitRate,
    required this.audioChannels,
    required this.audioSampleRate,
    required this.audioEncodingBitRate,
  });

  String filePath;

  AndroidSize resolution;

  int encodingBitRate;

  int audioChannels;

  int audioSampleRate;

  int audioEncodingBitRate;

  List<Object?> _toList() {
    return <Object?>[
      filePath,
      resolution,
      encodingBitRate,
      audioChannels,
      audioSampleRate,
      audioEncodingBitRate,
    ];
  }

  Object encode() {
    return _toList();
  }

  static AndroidVideoRecordRequest decode(Object result) {
    result as List<Object?>;
    return AndroidVideoRecordRequest(
      filePath: result[0]! as String,
      resolution: result[1]! as AndroidSize,
      encodingBitRate: result[2]! as int,
      audioChannels: result[3]! as int,
      audioSampleRate: result[4]! as int,
      audioEncodingBitRate: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidVideoRecordRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Stores the camera data while opening the camera
/// - [frameRate]: Frame rate at which the camera session captures the images.
/// - [textureId]: Surface texture id.
/// - [previewSize]: Camera preview size.
/// - [supportedSizes]: Supported sizes by the camera device.
class AndroidCameraData {
  AndroidCameraData({
    required this.frameRate,
    required this.textureId,
    required this.previewSize,
    required this.supportedSizes,
    required this.supportedFps,
  });

  int frameRate;

  int textureId;

  AndroidSize previewSize;

  List<AndroidSize> supportedSizes;

  List<int> supportedFps;

  List<Object?> _toList() {
    return <Object?>[
      frameRate,
      textureId,
      previewSize,
      supportedSizes,
      supportedFps,
    ];
  }

  Object encode() {
    return _toList();
  }

  static AndroidCameraData decode(Object result) {
    result as List<Object?>;
    return AndroidCameraData(
      frameRate: result[0]! as int,
      textureId: result[1]! as int,
      previewSize: result[2]! as AndroidSize,
      supportedSizes: (result[3] as List<Object?>?)!.cast<AndroidSize>(),
      supportedFps: (result[4] as List<Object?>?)!.cast<int>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidCameraData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class AndroidOrientationData {
  AndroidOrientationData({
    required this.isFrontCamera,
    required this.sensorOrientationDegrees,
    required this.deviceOrientationDegrees,
    required this.displayOrientationDegrees,
    required this.rotationDegrees,
  });

  bool isFrontCamera;

  int sensorOrientationDegrees;

  int deviceOrientationDegrees;

  int displayOrientationDegrees;

  int rotationDegrees;

  List<Object?> _toList() {
    return <Object?>[
      isFrontCamera,
      sensorOrientationDegrees,
      deviceOrientationDegrees,
      displayOrientationDegrees,
      rotationDegrees,
    ];
  }

  Object encode() {
    return _toList();
  }

  static AndroidOrientationData decode(Object result) {
    result as List<Object?>;
    return AndroidOrientationData(
      isFrontCamera: result[0]! as bool,
      sensorOrientationDegrees: result[1]! as int,
      deviceOrientationDegrees: result[2]! as int,
      displayOrientationDegrees: result[3]! as int,
      rotationDegrees: result[4]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidOrientationData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class AndroidImagePlaneData {
  AndroidImagePlaneData({
    required this.bytes,
    required this.rowStride,
    required this.pixelStride,
  });

  Uint8List bytes;

  int rowStride;

  int pixelStride;

  List<Object?> _toList() {
    return <Object?>[bytes, rowStride, pixelStride];
  }

  Object encode() {
    return _toList();
  }

  static AndroidImagePlaneData decode(Object result) {
    result as List<Object?>;
    return AndroidImagePlaneData(
      bytes: result[0]! as Uint8List,
      rowStride: result[1]! as int,
      pixelStride: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidImagePlaneData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class AndroidCameraImageData {
  AndroidCameraImageData({
    required this.width,
    required this.height,
    required this.format,
    required this.planes,
    required this.rotationDegrees,
  });

  int width;

  int height;

  int format;

  List<AndroidImagePlaneData?> planes;

  int rotationDegrees;

  List<Object?> _toList() {
    return <Object?>[width, height, format, planes, rotationDegrees];
  }

  Object encode() {
    return _toList();
  }

  static AndroidCameraImageData decode(Object result) {
    result as List<Object?>;
    return AndroidCameraImageData(
      width: result[0]! as int,
      height: result[1]! as int,
      format: result[2]! as int,
      planes: (result[3] as List<Object?>?)!.cast<AndroidImagePlaneData?>(),
      rotationDegrees: result[4]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidCameraImageData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class AndroidSize {
  AndroidSize({required this.width, required this.height});

  double width;

  double height;

  List<Object?> _toList() {
    return <Object?>[width, height];
  }

  Object encode() {
    return _toList();
  }

  static AndroidSize decode(Object result) {
    result as List<Object?>;
    return AndroidSize(
      width: result[0]! as double,
      height: result[1]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidSize || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class AndroidRangeInt {
  AndroidRangeInt({required this.lower, required this.upper});

  int lower;

  int upper;

  List<Object?> _toList() {
    return <Object?>[lower, upper];
  }

  Object encode() {
    return _toList();
  }

  static AndroidRangeInt decode(Object result) {
    result as List<Object?>;
    return AndroidRangeInt(lower: result[0]! as int, upper: result[1]! as int);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidRangeInt || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is AndroidCameraRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AndroidImageStreamRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is AndroidAudioStreamRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is AndroidVideoRecordRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is AndroidCameraData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is AndroidOrientationData) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is AndroidImagePlaneData) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is AndroidCameraImageData) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is AndroidSize) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is AndroidRangeInt) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return AndroidCameraRequest.decode(readValue(buffer)!);
      case 130:
        return AndroidImageStreamRequest.decode(readValue(buffer)!);
      case 131:
        return AndroidAudioStreamRequest.decode(readValue(buffer)!);
      case 132:
        return AndroidVideoRecordRequest.decode(readValue(buffer)!);
      case 133:
        return AndroidCameraData.decode(readValue(buffer)!);
      case 134:
        return AndroidOrientationData.decode(readValue(buffer)!);
      case 135:
        return AndroidImagePlaneData.decode(readValue(buffer)!);
      case 136:
        return AndroidCameraImageData.decode(readValue(buffer)!);
      case 137:
        return AndroidSize.decode(readValue(buffer)!);
      case 138:
        return AndroidRangeInt.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AndroidCameraHostApi {
  /// Constructor for [AndroidCameraHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidCameraHostApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<AndroidCameraData> openCamera(AndroidCameraRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.openCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[request],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidCameraData?)!;
    }
  }

  Future<AndroidOrientationData> getOrientationData() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.getOrientationData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AndroidOrientationData?)!;
    }
  }

  Future<void> startImageStream(AndroidImageStreamRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startImageStream$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[request],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopImageStream() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopImageStream$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAudioStream(AndroidAudioStreamRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startAudioStream$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[request],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopAudioStream() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopAudioStream$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startVideoRecording(AndroidVideoRecordRequest request) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.startVideoRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[request],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopVideoRecording() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.stopVideoRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> closeCamera() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraHostApi.closeCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class AndroidCameraFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Receives image data from the camera while streaming images.
  void onImageReceived(AndroidCameraImageData cameraImage);

  /// Receives audio bytes from the microphone while streaming audio.
  void onAudioReceived(Uint8List audioBytes);

  static void setUp(
    AndroidCameraFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onImageReceived$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onImageReceived was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final AndroidCameraImageData? arg_cameraImage =
              (args[0] as AndroidCameraImageData?);
          assert(
            arg_cameraImage != null,
            'Argument for dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onImageReceived was null, expected non-null AndroidCameraImageData.',
          );
          try {
            api.onImageReceived(arg_cameraImage!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onAudioReceived$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onAudioReceived was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_audioBytes = (args[0] as Uint8List?);
          assert(
            arg_audioBytes != null,
            'Argument for dev.flutter.pigeon.com.platform.channel.AndroidCameraFlutterApi.onAudioReceived was null, expected non-null Uint8List.',
          );
          try {
            api.onAudioReceived(arg_audioBytes!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
